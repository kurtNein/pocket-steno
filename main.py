import os
import docx
import pptx
from pptx import Presentation
import openai
import collections
import collections.abc
import easygui
import datetime
from datetime import datetime
import traceback
import regex as rx


version = " -- v 1.0"
window_title = "PocketSteno © Kurt C. Neinstedt" + version

citation_openai = "This text was generated by an OpenAI model and PocketSteno. \nPocketSteno © 2023 Kurt C. Neinstedt."
citation_personal = "This text was transcribed by PocketSteno © 2023 Kurt C. Neinstedt"


def remove_control_characters(string):
    return rx.sub(r'\p{C}', '', string)


def get_directory(question):
    in_directory = easygui.enterbox(question, window_title)
    return in_directory


def transcribe_pptx(in_directory, file):
    notes = []
    ppt = Presentation(fr"{in_directory}\{file}")

    print(f"Working on {file}...")

    try:
        for page, slide in enumerate(ppt.slides):
            try:
                raw_text = slide.notes_slide.notes_text_frame.text

                text = remove_control_characters(raw_text)
                notes.append(text)
            except AttributeError:
                pass
    except ValueError:
        pass
    return notes


def transcribe_pptx_slides(in_directory, file):
    slides = []
    ppt = Presentation(fr"{in_directory}\{file}")

    print(f"Working on {file}...")

    try:
        for page, slide in enumerate(ppt.slides):
            for shape in slide.shapes:
                if not shape.has_text_frame:
                    continue
                for paragraph in shape.text_frame.paragraphs:
                    for run in paragraph.runs:
                        slides.append(run.text)
                        slides.append("\n")
    except ValueError:
        pass
    except KeyError:
        pass
    return slides


def generate_text(prompt):
    completions = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=1800,
        n=1,
        stop=None,
        temperature=0.4,
    )

    message = completions.choices[0].text
    return message


def generate_text_light(prompt):
    completions = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=600,
        n=1,
        stop=None,
        temperature=0.5,
    )

    message = completions.choices[0].text
    return message


def assemble_essay(input_list, prompt):
    for sentence in input_list:
        prompt += sentence + "\n"
    essay = generate_text(prompt)
    return essay


def assemble_essay_light(input_list, prompt):
    for sentence in input_list:
        prompt += sentence + "\n"
    essay = generate_text_light(prompt)
    return essay


def main():
    easygui.msgbox("Welcome to PocketSteno.\n\n"
                   "PocketSteno will read .pptx files in a file folder you provide, "
                   "then perform tasks on them.", window_title)
    source_directory = get_directory("Please enter the file directory where your presentations are.\n\n"
                                     "e.g. \tC:\\Users\\%USER%\\Documents")
    choices = ["Write an essay.", "Transcribe the text exactly."]
    prompt = easygui.choicebox("Choose what to do with these files.", window_title, choices)
    destination_directory = get_directory("Please enter the file directory where your result will be saved.\n")

    if prompt == "Write an essay.":

        openai.api_key = easygui.passwordbox("This will submit to OpenAI.\nEnter a valid API key to proceed:",
                                             window_title)

        prompt = "Write an essay summarizing a presentation. " \
                 "The essay should be written in first-person, in the style and tone " \
                 "of a scientific article in an industry publication. " \
                 "The essay should convey every fact from the presentation. " \
                 "The essay should not include facts or quotes not already in the presentation. " \
                 "The essay must be between 200 and 600 words. " \
                 "Here is the presentation to to summarize: "
        for file in os.listdir(source_directory):
            try:
                transcription = transcribe_pptx(source_directory, file) + transcribe_pptx_slides(source_directory, file)

                doc = docx.Document()
                doc.add_paragraph(assemble_essay(transcription, prompt))
                doc.add_paragraph(citation_openai)
                doc.save(os.path.join(destination_directory, file) + ".docx")
                print(f"Completed {file}.")

            except openai.error.InvalidRequestError:
                try:
                    transcription = transcribe_pptx(source_directory, file)

                    doc = docx.Document()
                    doc.add_paragraph(assemble_essay_light(transcription, prompt))
                    doc.add_paragraph(citation_openai)
                    doc.save(os.path.join(destination_directory, file) + ".docx")
                    print(f"Completed {file}.")
                    continue
                except openai.error.InvalidRequestError:

                    transcription = transcribe_pptx(source_directory, file)

                    doc = docx.Document()
                    first_half = transcription[:(1*len(transcription))//(len(transcription)*4)]
                    second_half = transcription[1*len(transcription)//(len(transcription)*3): 2*len(transcription)//(len(transcription)*4)]
                    third_half = transcription[2*len(transcription)//(len(transcription)*3): 3*len(transcription)//(len(transcription)*4)]
                    fourth_half = transcription[-len(transcription) // (len(transcription) * 4):]

                    doc.add_paragraph(assemble_essay_light(first_half, prompt))

                    doc.add_paragraph(assemble_essay_light(second_half, prompt))

                    doc.add_paragraph(assemble_essay_light(third_half, prompt))

                    doc.add_paragraph(assemble_essay_light(fourth_half, prompt))
                    doc.add_paragraph(citation_openai)
                    doc.save(os.path.join(destination_directory, file) + ".docx")
                    print(f"{file} exceeded character limit.")
                    continue

    else:
        for file in os.listdir(source_directory):
            try:
                transcription = transcribe_pptx(source_directory, file) + transcribe_pptx_slides(source_directory, file)
            except openai.error.InvalidRequestError:
                transcription = transcribe_pptx(source_directory, file)
            doc = docx.Document()

            doc.add_paragraph(transcription)

            doc.save(os.path.join(destination_directory, file) + ".docx")
            print(f"Completed {file}.")


if __name__ == '__main__':
    try:
        a = True

        while a:
            try:
                main()
            except PermissionError:
                easygui.msgbox("An error occurred.\n\n"
                               "Make sure all files are closed while the program runs.")

            a = easygui.boolbox("Process complete. Run again?")
            if a is True:
                continue

            else:

                a = False
    except Exception:
        print(traceback.format_exc())
        input('Input anything to end...')
        pass
